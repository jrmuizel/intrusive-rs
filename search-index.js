var N = null;var searchIndex = {};
searchIndex["intrusive_collections"]={"doc":"Intrusive collections for Rust.","items":[[3,"UnsafeRef","intrusive_collections","Unchecked shared pointer",N,N],[4,"Bound","","An endpoint of a range of keys.",N,N],[13,"Included","","An inclusive bound.",0,N],[13,"Excluded","","An exclusive bound.",0,N],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in this direction.",0,N],[11,"into_raw","","",1,N],[11,"from_raw","","",1,N],[11,"from_raw","","Creates an `UnsafeRef` from a raw pointer",1,N],[11,"into_raw","","Converts an `UnsafeRef` into a raw pointer",1,N],[11,"from_box","","Creates an `UnsafeRef` from a `Box`",1,[[["box"]],["unsaferef"]]],[11,"into_box","","Converts an `UnsafeRef` into a `Box`",1,[[["self"]],["box"]]],[11,"clone","","",1,[[["self"]],["unsaferef"]]],[11,"deref","","",1,[[["self"]],["t"]]],[11,"as_ref","","",1,[[["self"]],["t"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[0,"linked_list","","Intrusive doubly-linked list.",N,N],[3,"Link","intrusive_collections::linked_list","Intrusive link that allows an object to be inserted into a `LinkedList`.",N,N],[3,"Cursor","","A cursor which provides read-only access to a `LinkedList`.",N,N],[3,"CursorMut","","A cursor which provides mutable access to a `LinkedList`.",N,N],[3,"LinkedList","","An intrusive doubly-linked list.",N,N],[3,"Iter","","An iterator over references to the items of a `LinkedList`.",N,N],[3,"IntoIter","","An iterator which consumes a `LinkedList`.",N,N],[11,"new","","Creates a new `Link`.",2,[[],["link"]]],[11,"is_linked","","Checks whether the `Link` is linked into a `LinkedList`.",2,[[["self"]],["bool"]]],[11,"force_unlink","","Forcibly unlinks an object from a `LinkedList`.",2,[[["self"]]]],[11,"clone","","",2,[[["self"]],["link"]]],[11,"default","","",2,[[],["link"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["cursor"]]],[11,"is_null","","Checks if the cursor is currently pointing to the null object.",3,[[["self"]],["bool"]]],[11,"get","","Returns a reference to the object that the cursor is currently pointing to.",3,[[["self"]],["option"]]],[11,"move_next","","Moves the cursor to the next element of the `LinkedList`.",3,[[["self"]]]],[11,"move_prev","","Moves the cursor to the previous element of the `LinkedList`.",3,[[["self"]]]],[11,"peek_next","","Returns a cursor pointing to the next element of the `LinkedList`.",3,[[["self"]],["cursor"]]],[11,"peek_prev","","Returns a cursor pointing to the previous element of the `LinkedList`.",3,[[["self"]],["cursor"]]],[11,"is_null","","Checks if the cursor is currently pointing to the null object.",4,[[["self"]],["bool"]]],[11,"get","","Returns a reference to the object that the cursor is currently pointing to.",4,[[["self"]],["option"]]],[11,"as_cursor","","Returns a read-only cursor pointing to the current element.",4,[[["self"]],["cursor"]]],[11,"move_next","","Moves the cursor to the next element of the `LinkedList`.",4,[[["self"]]]],[11,"move_prev","","Moves the cursor to the previous element of the `LinkedList`.",4,[[["self"]]]],[11,"peek_next","","Returns a cursor pointing to the next element of the `LinkedList`.",4,[[["self"]],["cursor"]]],[11,"peek_prev","","Returns a cursor pointing to the previous element of the `LinkedList`.",4,[[["self"]],["cursor"]]],[11,"remove","","Removes the current element from the `LinkedList`.",4,[[["self"]],["option"]]],[11,"replace_with","","Removes the current element from the `LinkedList` and inserts another object in its place.",4,N],[11,"insert_after","","Inserts a new element into the `LinkedList` after the current one.",4,N],[11,"insert_before","","Inserts a new element into the `LinkedList` before the current one.",4,N],[11,"splice_after","","Inserts the elements from the given `LinkedList` after the current one.",4,[[["self"],["linkedlist"]]]],[11,"splice_before","","Moves all element from the given `LinkedList` before the current one.",4,[[["self"],["linkedlist"]]]],[11,"split_after","","Splits the list into two after the current element. This will return a new list consisting of everything after the cursor, with the original list retaining everything before.",4,[[["self"]],["linkedlist"]]],[11,"split_before","","Splits the list into two before the current element. This will return a new list consisting of everything before the cursor, with the original list retaining everything after.",4,[[["self"]],["linkedlist"]]],[11,"new","","Creates an empty `LinkedList`.",5,[[["a"]],["linkedlist"]]],[11,"is_empty","","Returns `true if the`LinkedList` is empty.",5,[[["self"]],["bool"]]],[11,"cursor","","Returns a null `Cursor` for this list.",5,[[["self"]],["cursor"]]],[11,"cursor_mut","","Returns a null `CursorMut` for this list.",5,[[["self"]],["cursormut"]]],[11,"cursor_from_ptr","","Creates a `Cursor` from a pointer to an element.",5,N],[11,"cursor_mut_from_ptr","","Creates a `CursorMut` from a pointer to an element.",5,N],[11,"front","","Returns a `Cursor` pointing to the first element of the list. If the list is empty then a null cursor is returned.",5,[[["self"]],["cursor"]]],[11,"front_mut","","Returns a `CursorMut` pointing to the first element of the list. If the the list is empty then a null cursor is returned.",5,[[["self"]],["cursormut"]]],[11,"back","","Returns a `Cursor` pointing to the last element of the list. If the list is empty then a null cursor is returned.",5,[[["self"]],["cursor"]]],[11,"back_mut","","Returns a `CursorMut` pointing to the last element of the list. If the list is empty then a null cursor is returned.",5,[[["self"]],["cursormut"]]],[11,"iter","","Gets an iterator over the objects in the `LinkedList`.",5,[[["self"]],["iter"]]],[11,"clear","","Removes all elements from the `LinkedList`.",5,[[["self"]]]],[11,"fast_clear","","Empties the `LinkedList` without unlinking or freeing objects in it.",5,[[["self"]]]],[11,"take","","Takes all the elements out of the `LinkedList`, leaving it empty. The taken elements are returned as a new `LinkedList`.",5,[[["self"]],["linkedlist"]]],[11,"push_front","","Inserts a new element at the start of the `LinkedList`.",5,N],[11,"push_back","","Inserts a new element at the end of the `LinkedList`.",5,N],[11,"pop_front","","Removes the first element of the `LinkedList`.",5,[[["self"]],["option"]]],[11,"pop_back","","Removes the last element of the `LinkedList`.",5,[[["self"]],["option"]]],[11,"drop","","",5,[[["self"]]]],[11,"into_iter","","",5,[[["self"]],["intoiter"]]],[11,"default","","",5,[[],["linkedlist"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"next","","",6,[[["self"]],["option"]]],[11,"next_back","","",6,[[["self"]],["option"]]],[11,"clone","","",6,[[["self"]],["iter"]]],[11,"next","","",7,[[["self"]],["option"]]],[11,"next_back","","",7,[[["self"]],["option"]]],[0,"rbtree","intrusive_collections","Intrusive red-black tree.",N,N],[3,"Link","intrusive_collections::rbtree","Intrusive link that allows an object to be inserted into a `RBTree`.",N,N],[3,"Cursor","","A cursor which provides read-only access to a `RBTree`.",N,N],[3,"CursorMut","","A cursor which provides mutable access to a `RBTree`.",N,N],[3,"RBTree","","An intrusive red-black tree.",N,N],[3,"InsertCursor","","A cursor pointing to a slot in which an element can be inserted into a `RBTree`.",N,N],[3,"Iter","","An iterator over references to the items of a `RBTree`.",N,N],[3,"IntoIter","","An iterator which consumes a `RBTree`.",N,N],[4,"Entry","","An entry in a `RBTree`.",N,N],[13,"Occupied","","An occupied entry.",8,N],[13,"Vacant","","A vacant entry.",8,N],[11,"new","","Creates a new `Link`.",9,[[],["link"]]],[11,"is_linked","","Checks whether the `Link` is linked into a `RBTree`.",9,[[["self"]],["bool"]]],[11,"force_unlink","","Forcibly unlinks an object from a `RBTree`.",9,[[["self"]]]],[11,"clone","","",9,[[["self"]],["link"]]],[11,"default","","",9,[[],["link"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["cursor"]]],[11,"is_null","","Checks if the cursor is currently pointing to the null object.",10,[[["self"]],["bool"]]],[11,"get","","Returns a reference to the object that the cursor is currently pointing to.",10,[[["self"]],["option"]]],[11,"move_next","","Moves the cursor to the next element of the `RBTree`.",10,[[["self"]]]],[11,"move_prev","","Moves the cursor to the previous element of the `RBTree`.",10,[[["self"]]]],[11,"peek_next","","Returns a cursor pointing to the next element of the `RBTree`.",10,[[["self"]],["cursor"]]],[11,"peek_prev","","Returns a cursor pointing to the previous element of the `RBTree`.",10,[[["self"]],["cursor"]]],[11,"is_null","","Checks if the cursor is currently pointing to the null object.",11,[[["self"]],["bool"]]],[11,"get","","Returns a reference to the object that the cursor is currently pointing to.",11,[[["self"]],["option"]]],[11,"as_cursor","","Returns a read-only cursor pointing to the current element.",11,[[["self"]],["cursor"]]],[11,"move_next","","Moves the cursor to the next element of the `RBTree`.",11,[[["self"]]]],[11,"move_prev","","Moves the cursor to the previous element of the `RBTree`.",11,[[["self"]]]],[11,"peek_next","","Returns a cursor pointing to the next element of the `RBTree`.",11,[[["self"]],["cursor"]]],[11,"peek_prev","","Returns a cursor pointing to the previous element of the `RBTree`.",11,[[["self"]],["cursor"]]],[11,"remove","","Removes the current element from the `RBTree`.",11,[[["self"]],["option"]]],[11,"replace_with","","Removes the current element from the `RBTree` and inserts another object in its place.",11,N],[11,"insert_after","","Inserts a new element into the `RBTree` after the current one.",11,N],[11,"insert_before","","Inserts a new element into the `RBTree` before the current one.",11,N],[11,"insert","","Inserts a new element into the `RBTree`.",11,N],[11,"new","","Creates an empty `RBTree`.",12,[[["a"]],["rbtree"]]],[11,"is_empty","","Returns `true if the`RBTree` is empty.",12,[[["self"]],["bool"]]],[11,"cursor","","Returns a null `Cursor` for this tree.",12,[[["self"]],["cursor"]]],[11,"cursor_mut","","Returns a null `CursorMut` for this tree.",12,[[["self"]],["cursormut"]]],[11,"cursor_from_ptr","","Creates a `Cursor` from a pointer to an element.",12,N],[11,"cursor_mut_from_ptr","","Creates a `CursorMut` from a pointer to an element.",12,N],[11,"front","","Returns a `Cursor` pointing to the first element of the tree. If the tree is empty then a null cursor is returned.",12,[[["self"]],["cursor"]]],[11,"front_mut","","Returns a `CursorMut` pointing to the first element of the tree. If the the tree is empty then a null cursor is returned.",12,[[["self"]],["cursormut"]]],[11,"back","","Returns a `Cursor` pointing to the last element of the tree. If the tree is empty then a null cursor is returned.",12,[[["self"]],["cursor"]]],[11,"back_mut","","Returns a `CursorMut` pointing to the last element of the tree. If the tree is empty then a null cursor is returned.",12,[[["self"]],["cursormut"]]],[11,"iter","","Gets an iterator over the objects in the `RBTree`, in ascending key order.",12,[[["self"]],["iter"]]],[11,"clear","","Removes all elements from the `RBTree`.",12,[[["self"]]]],[11,"fast_clear","","Empties the `RBTree` without unlinking or freeing objects in it.",12,[[["self"]]]],[11,"take","","Takes all the elements out of the `RBTree`, leaving it empty. The taken elements are returned as a new `RBTree`.",12,[[["self"]],["rbtree"]]],[11,"find","","Returns a `Cursor` pointing to an element with the given key. If no such element is found then a null cursor is returned.",12,[[["self"],["q"]],["cursor"]]],[11,"find_mut","","Returns a `CursorMut` pointing to an element with the given key. If no such element is found then a null cursor is returned.",12,[[["self"],["q"]],["cursormut"]]],[11,"lower_bound","","Returns a `Cursor` pointing to the lowest element whose key is above the given bound. If no such element is found then a null cursor is returned.",12,[[["self"],["bound"]],["cursor"]]],[11,"lower_bound_mut","","Returns a `CursorMut` pointing to the first element whose key is above the given bound. If no such element is found then a null cursor is returned.",12,[[["self"],["bound"]],["cursormut"]]],[11,"upper_bound","","Returns a `Cursor` pointing to the last element whose key is below the given bound. If no such element is found then a null cursor is returned.",12,[[["self"],["bound"]],["cursor"]]],[11,"upper_bound_mut","","Returns a `CursorMut` pointing to the last element whose key is below the given bound. If no such element is found then a null cursor is returned.",12,[[["self"],["bound"]],["cursormut"]]],[11,"insert","","Inserts a new element into the `RBTree`.",12,N],[11,"entry","","Returns an `Entry` for the given key which contains a `CursorMut` to an element with the given key or an `InsertCursor` which points to a place in which to insert a new element with the given key.",12,[[["self"],["q"]],["entry"]]],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the tree, starting at min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative infinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\". Thus `range(Unbounded, Unbounded)` will yield the whole collection.",12,[[["self"],["bound"],["bound"]],["iter"]]],[11,"drop","","",12,[[["self"]]]],[11,"into_iter","","",12,[[["self"]],["intoiter"]]],[11,"default","","",12,[[],["rbtree"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"insert","","Inserts a new element into the `RBTree` at the location indicated by this `InsertCursor`.",13,N],[11,"or_insert","","Inserts an element into the `RBTree` if the entry is vacant, returning a `CursorMut` to the resulting value. If the entry is occupied then a `CursorMut` pointing to the element is returned.",8,N],[11,"or_insert_with","","Calls the given function and inserts the result into the `RBTree` if the entry is vacant, returning a `CursorMut` to the resulting value. If the entry is occupied then a `CursorMut` pointing to the element is returned and the function is not executed.",8,[[["self"],["f"]],["cursormut"]]],[11,"next","","",14,[[["self"]],["option"]]],[11,"next_back","","",14,[[["self"]],["option"]]],[11,"clone","","",14,[[["self"]],["iter"]]],[11,"next","","",15,[[["self"]],["option"]]],[11,"next_back","","",15,[[["self"]],["option"]]],[0,"singly_linked_list","intrusive_collections","Intrusive singly-linked list.",N,N],[3,"Link","intrusive_collections::singly_linked_list","Intrusive link that allows an object to be inserted into a `SinglyLinkedList`.",N,N],[3,"Cursor","","A cursor which provides read-only access to a `SinglyLinkedList`.",N,N],[3,"CursorMut","","A cursor which provides mutable access to a `SinglyLinkedList`.",N,N],[3,"SinglyLinkedList","","An intrusive singly-linked list.",N,N],[3,"Iter","","An iterator over references to the items of a `SinglyLinkedList`.",N,N],[3,"IntoIter","","An iterator which consumes a `SinglyLinkedList`.",N,N],[11,"new","","Creates a new `Link`.",16,[[],["link"]]],[11,"is_linked","","Checks whether the `Link` is linked into a `SinglyLinkedList`.",16,[[["self"]],["bool"]]],[11,"force_unlink","","Forcibly unlinks an object from a `SinglyLinkedList`.",16,[[["self"]]]],[11,"clone","","",16,[[["self"]],["link"]]],[11,"default","","",16,[[],["link"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"clone","","",17,[[["self"]],["cursor"]]],[11,"is_null","","Checks if the cursor is currently pointing to the null object.",17,[[["self"]],["bool"]]],[11,"get","","Returns a reference to the object that the cursor is currently pointing to.",17,[[["self"]],["option"]]],[11,"move_next","","Moves the cursor to the next element of the `SinglyLinkedList`.",17,[[["self"]]]],[11,"peek_next","","Returns a cursor pointing to the next element of the `SinglyLinkedList`.",17,[[["self"]],["cursor"]]],[11,"is_null","","Checks if the cursor is currently pointing to the null object.",18,[[["self"]],["bool"]]],[11,"get","","Returns a reference to the object that the cursor is currently pointing to.",18,[[["self"]],["option"]]],[11,"as_cursor","","Returns a read-only cursor pointing to the current element.",18,[[["self"]],["cursor"]]],[11,"move_next","","Moves the cursor to the next element of the `SinglyLinkedList`.",18,[[["self"]]]],[11,"peek_next","","Returns a cursor pointing to the next element of the `SinglyLinkedList`.",18,[[["self"]],["cursor"]]],[11,"remove_next","","Removes the next element from the `SinglyLinkedList`.",18,[[["self"]],["option"]]],[11,"replace_next_with","","Removes the next element from the `SinglyLinkedList` and inserts another object in its place.",18,N],[11,"insert_after","","Inserts a new element into the `SinglyLinkedList` after the current one.",18,N],[11,"splice_after","","Inserts the elements from the given `SinglyLinkedList` after the current one.",18,[[["self"],["singlylinkedlist"]]]],[11,"split_after","","Splits the list into two after the current element. This will return a new list consisting of everything after the cursor, with the original list retaining everything before.",18,[[["self"]],["singlylinkedlist"]]],[11,"new","","Creates an empty `SinglyLinkedList`.",19,[[["a"]],["singlylinkedlist"]]],[11,"is_empty","","Returns `true if the`SinglyLinkedList` is empty.",19,[[["self"]],["bool"]]],[11,"cursor","","Returns a null `Cursor` for this list.",19,[[["self"]],["cursor"]]],[11,"cursor_mut","","Returns a null `CursorMut` for this list.",19,[[["self"]],["cursormut"]]],[11,"cursor_from_ptr","","Creates a `Cursor` from a pointer to an element.",19,N],[11,"cursor_mut_from_ptr","","Creates a `CursorMut` from a pointer to an element.",19,N],[11,"front","","Returns a `Cursor` pointing to the first element of the list. If the list is empty then a null cursor is returned.",19,[[["self"]],["cursor"]]],[11,"front_mut","","Returns a `CursorMut` pointing to the first element of the list. If the the list is empty then a null cursor is returned.",19,[[["self"]],["cursormut"]]],[11,"iter","","Gets an iterator over the objects in the `SinglyLinkedList`.",19,[[["self"]],["iter"]]],[11,"clear","","Removes all elements from the `SinglyLinkedList`.",19,[[["self"]]]],[11,"fast_clear","","Empties the `SinglyLinkedList` without unlinking or freeing objects in it.",19,[[["self"]]]],[11,"take","","Takes all the elements out of the `SinglyLinkedList`, leaving it empty. The taken elements are returned as a new `SinglyLinkedList`.",19,[[["self"]],["singlylinkedlist"]]],[11,"push_front","","Inserts a new element at the start of the `SinglyLinkedList`.",19,N],[11,"pop_front","","Removes the first element of the `SinglyLinkedList`.",19,[[["self"]],["option"]]],[11,"drop","","",19,[[["self"]]]],[11,"into_iter","","",19,[[["self"]],["intoiter"]]],[11,"default","","",19,[[],["singlylinkedlist"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"next","","",20,[[["self"]],["option"]]],[11,"clone","","",20,[[["self"]],["iter"]]],[11,"next","","",21,[[["self"]],["option"]]],[8,"Adapter","intrusive_collections","Trait for a adapter which allows a type to be inserted into an intrusive collection. The `Link` type contains the collection-specific metadata which allows an object to be inserted into an intrusive collection. This type needs to match the collection type (eg. `LinkedListLink` for inserting in a `LinkedList`).",N,N],[16,"Link","","Collection-specific link type which allows an object to be inserted in an intrusive collection.",22,N],[16,"Value","","Object type which is inserted in an intrusive collection.",22,N],[16,"Pointer","","Pointer type which owns an instance of a value.",22,N],[10,"get_value","","Gets a reference to an object from a reference to a link in that object.",22,N],[10,"get_link","","Gets a reference to the link for the given object.",22,N],[8,"IntrusivePointer","","Trait representing an owned pointer type which can be converted to and from a raw pointer.",N,N],[11,"into_raw","","Consumes the owned pointer and returns a raw pointer to the owned object.",23,N],[10,"from_raw","","Constructs an owned pointer from a raw pointer which was previously returned by `into_raw`.",23,N],[8,"KeyAdapter","","Extension of the `Adapter` trait to provide a way of extracting a key from an object. This key can then be used as an index in certain intrusive collections (currently only `RBTree` uses this).",N,N],[16,"Key","","Type of the key returned by `get_key`.",24,N],[10,"get_key","","Gets the key for the given object.",24,N],[11,"clone","","",0,[[["self"]],["bound"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,N],[11,"eq","","",0,[[["self"],["bound"]],["bool"]]],[11,"ne","","",0,[[["self"],["bound"]],["bool"]]],[14,"offset_of","","Macro to get the offset of a struct field in bytes from the address of the struct.",N,N],[14,"container_of","","Unsafe macro to get a raw pointer to an outer object from a pointer to one of its fields.",N,N],[14,"intrusive_adapter","","Macro to generate an implementation of `Adapter` for a given set of types. In particular this will automatically generate implementations of the `get_value` and `get_link` methods for a given named field in a struct.",N,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"into_raw","","Consumes the owned pointer and returns a raw pointer to the owned object.",23,N],[11,"from","intrusive_collections::linked_list","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into_iter","","",5,[[["self"]],["i"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into_iter","","",6,[[["self"]],["i"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"into_iter","","",7,[[["self"]],["i"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","intrusive_collections::rbtree","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into_iter","","",12,[[["self"]],["i"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into_iter","","",14,[[["self"]],["i"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"from","","",15,[[["t"]],["t"]]],[11,"into_iter","","",15,[[["self"]],["i"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","intrusive_collections::singly_linked_list","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into_iter","","",19,[[["self"]],["i"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into_iter","","",20,[[["self"]],["i"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"from","","",21,[[["t"]],["t"]]],[11,"into_iter","","",21,[[["self"]],["i"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]]],"paths":[[4,"Bound"],[3,"UnsafeRef"],[3,"Link"],[3,"Cursor"],[3,"CursorMut"],[3,"LinkedList"],[3,"Iter"],[3,"IntoIter"],[4,"Entry"],[3,"Link"],[3,"Cursor"],[3,"CursorMut"],[3,"RBTree"],[3,"InsertCursor"],[3,"Iter"],[3,"IntoIter"],[3,"Link"],[3,"Cursor"],[3,"CursorMut"],[3,"SinglyLinkedList"],[3,"Iter"],[3,"IntoIter"],[8,"Adapter"],[8,"IntrusivePointer"],[8,"KeyAdapter"]]};
initSearch(searchIndex);
